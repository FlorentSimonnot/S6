.TH "header/decl.h" 3 "Sat Apr 13 2019" "Compilation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
header/decl.h \- Define the stack, Symbol Table of Variables, Constantes, Function\&.  

.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBSTentry\fP"
.br
.RI "define a struct for a variable\&. "
.ti -1c
.RI "struct \fBCONSTentry\fP"
.br
.RI "define a struct for a constante\&. "
.ti -1c
.RI "struct \fBMACROentry\fP"
.br
.RI "define a struct for a macro constante\&. "
.ti -1c
.RI "struct \fBMtable\fP"
.br
.ti -1c
.RI "struct \fBcel\fP"
.br
.ti -1c
.RI "struct \fBfun\fP"
.br
.ti -1c
.RI "struct \fBftable\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDEFAULT\fP   '\\033[0m'"
.br
.ti -1c
.RI "#define \fBHIGHLIGHT\fP   '\\033[1m'"
.br
.ti -1c
.RI "#define \fBUNDERLINE\fP   '\\033[4m'"
.br
.ti -1c
.RI "#define \fBBLINK\fP   '\\033[5m'"
.br
.ti -1c
.RI "#define \fBBLACK\fP   '\\033[30m'"
.br
.ti -1c
.RI "#define \fBRED\fP   '\\033[31m'"
.br
.ti -1c
.RI "#define \fBGREEN\fP   '\\033[32m'"
.br
.ti -1c
.RI "#define \fBYELLOW\fP   '\\033[33m'"
.br
.ti -1c
.RI "#define \fBBLUE\fP   '\\033[34m'"
.br
.ti -1c
.RI "#define \fBPURPLE\fP   '\\033[35m'"
.br
.ti -1c
.RI "#define \fBCYAN\fP   '\\033[36m'"
.br
.ti -1c
.RI "#define \fBWHITE\fP   '\\033[37m'"
.br
.ti -1c
.RI "#define \fBMAXNAME\fP   64"
.br
.ti -1c
.RI "#define \fBMAXNBSYMBOL\fP   32"
.br
.ti -1c
.RI "#define \fBERR_TYPE\fP   \-1"
.br
.ti -1c
.RI "#define \fBCHAR\fP   0"
.br
.ti -1c
.RI "#define \fBINTEGER\fP   1"
.br
.ti -1c
.RI "#define \fBREAL\fP   2"
.br
.ti -1c
.RI "#define \fBVOIDTYPE\fP   3"
.br
.ti -1c
.RI "#define \fBLONG\fP   4"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBcel\fP \fBSTStackCel\fP"
.br
.ti -1c
.RI "typedef struct \fBcel\fP * \fBSTStack\fP"
.br
.ti -1c
.RI "typedef struct \fBfun\fP \fBFUNentry\fP"
.br
.ti -1c
.RI "typedef struct \fBftable\fP \fBFtable\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinitProg\fP ()"
.br
.RI "Initialize the programm\&. "
.ti -1c
.RI "void \fBcreateStack\fP ()"
.br
.RI "Create the stack\&. "
.ti -1c
.RI "int \fBgetType\fP (const char *type)"
.br
.RI "return the integer associated to the type\&. "
.ti -1c
.RI "int \fBaddVar\fP (const char name[], int type, int is_parameter, int value, float valueFloat)"
.br
.ti -1c
.RI "int \fBaddConst\fP (const char name[], int type, int value, float valueFloat)"
.br
.ti -1c
.RI "int \fBaddMacro\fP (const char name[], int type, int value, float valueFloat)"
.br
.ti -1c
.RI "int \fBaddFun\fP (const char name[], int type)"
.br
.ti -1c
.RI "int \fBisConstante\fP (const char name[])"
.br
.ti -1c
.RI "void \fBdisplayTable\fP ()"
.br
.RI "display the table of variables "
.ti -1c
.RI "void \fBdisplayConst\fP ()"
.br
.RI "display the table of constantes "
.ti -1c
.RI "void \fBdisplayMacro\fP ()"
.br
.RI "display the table of macros "
.ti -1c
.RI "void \fBdisplayFunTable\fP ()"
.br
.RI "display the table of functions "
.ti -1c
.RI "int \fBlookup\fP (const char name[], int is_tab)"
.br
.RI "verify if a variable or a constante with the same name exists\&. "
.ti -1c
.RI "int \fBlookupFunction\fP (const char name[])"
.br
.RI "verify if a function with the same name exists and return its type\&. "
.ti -1c
.RI "int \fBcheck_types\fP (int a, int b)"
.br
.RI "verify if a and b is the same type\&. "
.ti -1c
.RI "int \fBmax_type\fP (int a, int b)"
.br
.ti -1c
.RI "int \fBcast_type\fP (int a, int b, int flag_cast)"
.br
.ti -1c
.RI "void \fBaddArg\fP (char name[], int type)"
.br
.ti -1c
.RI "void \fBfreeStack\fP ()"
.br
.RI "free the memory used for the stack "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBline_num\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Define the stack, Symbol Table of Variables, Constantes, Function\&. 


.PP
\fBAuthor:\fP
.RS 4
SAM Nensy, SIMONNOT Florent 
.RE
.PP
\fBVersion:\fP
.RS 4
1\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
23rd March 2019 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void addArg (char name[], int type)"

.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of function use this argument 
.br
\fItype\fP the type of argument we want add\&. 
.RE
.PP

.SS "int addFun (const char name[], int type)"

.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of function 
.br
\fItype\fP the type of return value of function 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if we add the function\&. 0 else\&. 
.RE
.PP

.SS "int addMacro (const char name[], int type, int value, float valueFloat)"

.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of the macro 
.br
\fItype\fP the type of the macro 
.br
\fIvalue\fP the value of the macro 
.br
\fIvalueFloat\fP the float value of the macro 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if we add the macro\&. 0 else\&. 
.RE
.PP

.SS "int cast_type (int a, int b, int flag_cast)"

.PP
\fBParameters:\fP
.RS 4
\fIa\fP the first type 
.br
\fIb\fP the second type 
.br
\fIflag_cast\fP negatif if we don't use a cast\&. Else the value of the type use in the cast\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the valuation's type of expression\&. 
.RE
.PP

.SS "int check_types (int a, int b)"

.PP
verify if a and b is the same type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP - the first type 
.br
\fIb\fP - the second type 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if a and b is the same type\&. 0 else\&. 
.RE
.PP

.SS "int getType (const char * type)"

.PP
return the integer associated to the type\&. 
.PP
\fBParameters:\fP
.RS 4
\fItype\fP - a string which is a type (int, char, long, float\&.\&.\&.) 
.RE
.PP
\fBReturns:\fP
.RS 4
the MacroType\&. 
.RE
.PP

.SS "isConstante (const char name[])"

.PP
\fBParameters:\fP
.RS 4
\fIname\fP the name of variable, constante, macro we want check\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if this is a constante\&. 0 else\&. 
.RE
.PP

.SS "int lookup (const char name[], int is_tab)"

.PP
verify if a variable or a constante with the same name exists\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - the name of the ident we want check 
.br
\fIis_tab\fP - 0 if this is a variable, else the size of the array\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the type of the variable or constante in the stack with this name\&. Else -1\&. 
.RE
.PP

.SS "int lookupFunction (const char name[])"

.PP
verify if a function with the same name exists and return its type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP - the name of the function we want check
.RE
.PP
\fBReturns:\fP
.RS 4
the type of the function with this name in the stack\&. Else -1\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Compilation from the source code\&.
